/* eslint-disable @typescript-eslint/no-explicit-any */
// Certificate analyzer agent for SOFT system
// This matches exactly the Python implementation in agents/cert_analyzer.py

export class CertAnalyzerAgent {
  private model: any;
  private soluciones: any[] = [];
  private lastCertificados: any = null;

  constructor(model: any) {
    this.model = model;
    this.setup();
  }

  setup() {
    this.soluciones = [];
    this.lastCertificados = null;
  }

  /**
   * Analyzes and ranks certificates based on required skills
   * Each agent can generate slightly different solutions
   * Matches Python method: analizar_certificados()
   */
  analizarCertificados() {
    // Get ranked certificates
    const certificadosRanked = this.model.buscarCertificados();
    if (!certificadosRanked || !certificadosRanked.length) {
      return null;
    }

    // Introduce some variability in ranking
    // Each agent can give more weight to coverage or difficulty
    const preferenciaCobertura = Math.random() * 0.2 + 0.5; // Between 0.5 and 0.7
    const preferenciaDificultad = 1 - preferenciaCobertura;

    for (const cert of certificadosRanked) {
      cert.score = (cert.cobertura * preferenciaCobertura +
                   (cert.dificultad / 5) * preferenciaDificultad);
    }

    // Reorder based on new score
    certificadosRanked.sort((a: any, b: any) => b.score - a.score);

    // Assign to levels
    const propuestaNiveles = this.model.asignarCertificados(certificadosRanked);
    return propuestaNiveles;
  }

  /**
   * Single step of agent execution
   * Matches Python method: step()
   */
  async step() {
    const propuesta = this.analizarCertificados();
    if (propuesta) {
      this.soluciones.push(propuesta);
    }
  }

  /**
   * Get all solutions generated by this agent
   */
  getSoluciones() {
    return this.soluciones;
  }
}
